// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import {
  Game,
  User,
  GameRound,
  SongQuestion,
  Song,
  Artist,
  SongAnswer
} from "../../generated/prisma-client/index";
import { HiddenSong } from "./modelDefinitions";
import { Context } from "../types";

export type GameRoundStatus = "ACTIVE" | "COMPLETED" | "CANCELED";
export type WhosTurn = "PLAYER1" | "PLAYER2";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsSong {
    id: string;
  }

  export interface ArgsGameRound {
    id: string;
  }

  export interface ArgsSongQuestion {
    questionId: string;
  }

  export type GamesResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Game[] | Promise<Game[]>;

  export type UsersResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User[] | Promise<User[]>;

  export type SongResolver = (
    parent: undefined,
    args: ArgsSong,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Song | null | Promise<Song | null>;

  export type GameRoundResolver = (
    parent: undefined,
    args: ArgsGameRound,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => GameRound | Promise<GameRound>;

  export type SongQuestionResolver = (
    parent: undefined,
    args: ArgsSongQuestion,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => SongQuestion | Promise<SongQuestion>;

  export interface Type {
    games: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Game[] | Promise<Game[]>;

    users: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User[] | Promise<User[]>;

    song: (
      parent: undefined,
      args: ArgsSong,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Song | null | Promise<Song | null>;

    gameRound: (
      parent: undefined,
      args: ArgsGameRound,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => GameRound | Promise<GameRound>;

    songQuestion: (
      parent: undefined,
      args: ArgsSongQuestion,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => SongQuestion | Promise<SongQuestion>;
  }
}

export namespace GameResolvers {
  export const defaultResolvers = {
    id: (parent: Game) => parent.id,
    whosTurn: (parent: Game) => parent.whosTurn
  };

  export type IdResolver = (
    parent: Game,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type Player1Resolver = (
    parent: Game,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type Player2Resolver = (
    parent: Game,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type GameRoundsResolver = (
    parent: Game,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => GameRound[] | Promise<GameRound[]>;

  export type WhosTurnResolver = (
    parent: Game,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => WhosTurn | Promise<WhosTurn>;

  export interface Type {
    id: (
      parent: Game,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    player1: (
      parent: Game,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    player2: (
      parent: Game,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    gameRounds: (
      parent: Game,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => GameRound[] | Promise<GameRound[]>;

    whosTurn: (
      parent: Game,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => WhosTurn | Promise<WhosTurn>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    name: (parent: User) => parent.name
  };

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type GamesResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Game[] | Promise<Game[]>;

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    games: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Game[] | Promise<Game[]>;
  }
}

export namespace GameRoundResolvers {
  export const defaultResolvers = {
    id: (parent: GameRound) => parent.id,
    status: (parent: GameRound) => parent.status
  };

  export type IdResolver = (
    parent: GameRound,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type StatusResolver = (
    parent: GameRound,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => GameRoundStatus | Promise<GameRoundStatus>;

  export type SongQuestionsResolver = (
    parent: GameRound,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => SongQuestion[] | Promise<SongQuestion[]>;

  export type GameResolver = (
    parent: GameRound,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Game | Promise<Game>;

  export interface Type {
    id: (
      parent: GameRound,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    status: (
      parent: GameRound,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => GameRoundStatus | Promise<GameRoundStatus>;

    songQuestions: (
      parent: GameRound,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => SongQuestion[] | Promise<SongQuestion[]>;

    game: (
      parent: GameRound,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Game | Promise<Game>;
  }
}

export namespace SongQuestionResolvers {
  export const defaultResolvers = {
    id: (parent: SongQuestion) => parent.id
  };

  export type IdResolver = (
    parent: SongQuestion,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type SongResolver = (
    parent: SongQuestion,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Song | Promise<Song>;

  export type AnswersResolver = (
    parent: SongQuestion,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => SongAnswer[] | Promise<SongAnswer[]>;

  export type GameRoundResolver = (
    parent: SongQuestion,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => GameRound | Promise<GameRound>;

  export type SongAlternativesResolver = (
    parent: SongQuestion,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Song[] | Promise<Song[]>;

  export interface Type {
    id: (
      parent: SongQuestion,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    song: (
      parent: SongQuestion,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Song | Promise<Song>;

    answers: (
      parent: SongQuestion,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => SongAnswer[] | Promise<SongAnswer[]>;

    gameRound: (
      parent: SongQuestion,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => GameRound | Promise<GameRound>;

    songAlternatives: (
      parent: SongQuestion,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Song[] | Promise<Song[]>;
  }
}

export namespace SongResolvers {
  export const defaultResolvers = {
    id: (parent: Song) => parent.id,
    name: (parent: Song) => parent.name
  };

  export type IdResolver = (
    parent: Song,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Song,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ArtistResolver = (
    parent: Song,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Artist | Promise<Artist>;

  export interface Type {
    id: (
      parent: Song,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Song,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    artist: (
      parent: Song,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Artist | Promise<Artist>;
  }
}

export namespace ArtistResolvers {
  export const defaultResolvers = {
    id: (parent: Artist) => parent.id,
    name: (parent: Artist) => parent.name
  };

  export type IdResolver = (
    parent: Artist,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Artist,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type SongsResolver = (
    parent: Artist,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Song[] | Promise<Song[]>;

  export interface Type {
    id: (
      parent: Artist,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Artist,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    songs: (
      parent: Artist,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Song[] | Promise<Song[]>;
  }
}

export namespace SongAnswerResolvers {
  export const defaultResolvers = {
    id: (parent: SongAnswer) => parent.id,
    startTime: (parent: SongAnswer) => parent.startTime,
    time: (parent: SongAnswer) =>
      parent.time === undefined ? null : parent.time
  };

  export type IdResolver = (
    parent: SongAnswer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type StartTimeResolver = (
    parent: SongAnswer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UserResolver = (
    parent: SongAnswer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type GuessedSongResolver = (
    parent: SongAnswer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Song | null | Promise<Song | null>;

  export type TimeResolver = (
    parent: SongAnswer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type QuestionResolver = (
    parent: SongAnswer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => SongQuestion | Promise<SongQuestion>;

  export interface Type {
    id: (
      parent: SongAnswer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    startTime: (
      parent: SongAnswer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    user: (
      parent: SongAnswer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    guessedSong: (
      parent: SongAnswer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Song | null | Promise<Song | null>;

    time: (
      parent: SongAnswer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    question: (
      parent: SongAnswer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => SongQuestion | Promise<SongQuestion>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsStartGame {
    player1Id: string;
    player2Id: string;
  }

  export interface ArgsStartNewGameRound {
    gameId: string;
  }

  export interface ArgsCreateUser {
    name: string;
  }

  export interface ArgsStartQuestion {
    questionId: string;
  }

  export interface ArgsSubmitAnswer {
    questionId: string;
    songID: string;
    time: number;
  }

  export interface ArgsResetQuestion {
    questionID: string;
  }

  export type StartGameResolver = (
    parent: undefined,
    args: ArgsStartGame,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Game | Promise<Game>;

  export type StartNewGameRoundResolver = (
    parent: undefined,
    args: ArgsStartNewGameRound,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => GameRound | Promise<GameRound>;

  export type CreateUserResolver = (
    parent: undefined,
    args: ArgsCreateUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type StartQuestionResolver = (
    parent: undefined,
    args: ArgsStartQuestion,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => SongQuestion | Promise<SongQuestion>;

  export type SubmitAnswerResolver = (
    parent: undefined,
    args: ArgsSubmitAnswer,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => SongQuestion | Promise<SongQuestion>;

  export type ResetQuestionResolver = (
    parent: undefined,
    args: ArgsResetQuestion,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => SongQuestion | Promise<SongQuestion>;

  export interface Type {
    startGame: (
      parent: undefined,
      args: ArgsStartGame,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Game | Promise<Game>;

    startNewGameRound: (
      parent: undefined,
      args: ArgsStartNewGameRound,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => GameRound | Promise<GameRound>;

    createUser: (
      parent: undefined,
      args: ArgsCreateUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    startQuestion: (
      parent: undefined,
      args: ArgsStartQuestion,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => SongQuestion | Promise<SongQuestion>;

    submitAnswer: (
      parent: undefined,
      args: ArgsSubmitAnswer,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => SongQuestion | Promise<SongQuestion>;

    resetQuestion: (
      parent: undefined,
      args: ArgsResetQuestion,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => SongQuestion | Promise<SongQuestion>;
  }
}

export namespace SubscriptionResolvers {
  export const defaultResolvers = {};

  export interface ArgsRoundUpdates {
    roundId: string;
  }

  export type RoundUpdatesResolver = {
    subscribe: (
      parent: undefined,
      args: ArgsRoundUpdates,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AsyncIterator<SongQuestion> | Promise<AsyncIterator<SongQuestion>>;
    resolve?: (
      parent: undefined,
      args: ArgsRoundUpdates,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => SongQuestion | Promise<SongQuestion>;
  };

  export interface Type {
    roundUpdates: {
      subscribe: (
        parent: undefined,
        args: ArgsRoundUpdates,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AsyncIterator<SongQuestion> | Promise<AsyncIterator<SongQuestion>>;
      resolve?: (
        parent: undefined,
        args: ArgsRoundUpdates,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => SongQuestion | Promise<SongQuestion>;
    };
  }
}

export namespace HiddenSongResolvers {
  export const defaultResolvers = {
    id: (parent: HiddenSong) => parent.id
  };

  export type IdResolver = (
    parent: HiddenSong,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: HiddenSong,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Game: GameResolvers.Type;
  User: UserResolvers.Type;
  GameRound: GameRoundResolvers.Type;
  SongQuestion: SongQuestionResolvers.Type;
  Song: SongResolvers.Type;
  Artist: ArtistResolvers.Type;
  SongAnswer: SongAnswerResolvers.Type;
  Mutation: MutationResolvers.Type;
  Subscription: SubscriptionResolvers.Type;
  HiddenSong: HiddenSongResolvers.Type;
}
