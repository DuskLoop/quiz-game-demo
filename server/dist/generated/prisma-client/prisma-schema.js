"use strict";
// Code generated by Prisma (prisma@1.30.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/
Object.defineProperty(exports, "__esModule", { value: true });
exports.typeDefs = "type AggregateArtist {\n  count: Int!\n}\n\ntype AggregateGame {\n  count: Int!\n}\n\ntype AggregateGameRound {\n  count: Int!\n}\n\ntype AggregateSong {\n  count: Int!\n}\n\ntype AggregateSongAnswer {\n  count: Int!\n}\n\ntype AggregateSongQuestion {\n  count: Int!\n}\n\ntype AggregateUser {\n  count: Int!\n}\n\ntype Artist {\n  id: ID!\n  name: String!\n  songs(where: SongWhereInput, orderBy: SongOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Song!]\n}\n\ntype ArtistConnection {\n  pageInfo: PageInfo!\n  edges: [ArtistEdge]!\n  aggregate: AggregateArtist!\n}\n\ninput ArtistCreateInput {\n  id: ID\n  name: String!\n  songs: SongCreateManyWithoutArtistInput\n}\n\ninput ArtistCreateOneWithoutSongsInput {\n  create: ArtistCreateWithoutSongsInput\n  connect: ArtistWhereUniqueInput\n}\n\ninput ArtistCreateWithoutSongsInput {\n  id: ID\n  name: String!\n}\n\ntype ArtistEdge {\n  node: Artist!\n  cursor: String!\n}\n\nenum ArtistOrderByInput {\n  id_ASC\n  id_DESC\n  name_ASC\n  name_DESC\n  createdAt_ASC\n  createdAt_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n}\n\ntype ArtistPreviousValues {\n  id: ID!\n  name: String!\n}\n\ntype ArtistSubscriptionPayload {\n  mutation: MutationType!\n  node: Artist\n  updatedFields: [String!]\n  previousValues: ArtistPreviousValues\n}\n\ninput ArtistSubscriptionWhereInput {\n  mutation_in: [MutationType!]\n  updatedFields_contains: String\n  updatedFields_contains_every: [String!]\n  updatedFields_contains_some: [String!]\n  node: ArtistWhereInput\n  AND: [ArtistSubscriptionWhereInput!]\n  OR: [ArtistSubscriptionWhereInput!]\n  NOT: [ArtistSubscriptionWhereInput!]\n}\n\ninput ArtistUpdateInput {\n  name: String\n  songs: SongUpdateManyWithoutArtistInput\n}\n\ninput ArtistUpdateManyMutationInput {\n  name: String\n}\n\ninput ArtistUpdateOneRequiredWithoutSongsInput {\n  create: ArtistCreateWithoutSongsInput\n  update: ArtistUpdateWithoutSongsDataInput\n  upsert: ArtistUpsertWithoutSongsInput\n  connect: ArtistWhereUniqueInput\n}\n\ninput ArtistUpdateWithoutSongsDataInput {\n  name: String\n}\n\ninput ArtistUpsertWithoutSongsInput {\n  update: ArtistUpdateWithoutSongsDataInput!\n  create: ArtistCreateWithoutSongsInput!\n}\n\ninput ArtistWhereInput {\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  name: String\n  name_not: String\n  name_in: [String!]\n  name_not_in: [String!]\n  name_lt: String\n  name_lte: String\n  name_gt: String\n  name_gte: String\n  name_contains: String\n  name_not_contains: String\n  name_starts_with: String\n  name_not_starts_with: String\n  name_ends_with: String\n  name_not_ends_with: String\n  songs_every: SongWhereInput\n  songs_some: SongWhereInput\n  songs_none: SongWhereInput\n  AND: [ArtistWhereInput!]\n  OR: [ArtistWhereInput!]\n  NOT: [ArtistWhereInput!]\n}\n\ninput ArtistWhereUniqueInput {\n  id: ID\n  name: String\n}\n\ntype BatchPayload {\n  count: Long!\n}\n\nscalar DateTime\n\ntype Game {\n  id: ID!\n  player1: User!\n  player2: User!\n  gameRounds(where: GameRoundWhereInput, orderBy: GameRoundOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GameRound!]\n  whosTurn: WhosTurn!\n}\n\ntype GameConnection {\n  pageInfo: PageInfo!\n  edges: [GameEdge]!\n  aggregate: AggregateGame!\n}\n\ninput GameCreateInput {\n  id: ID\n  player1: UserCreateOneWithoutGamesAsPlayer1Input!\n  player2: UserCreateOneWithoutGamesAsPlayer2Input!\n  gameRounds: GameRoundCreateManyWithoutGameInput\n  whosTurn: WhosTurn!\n}\n\ninput GameCreateManyWithoutPlayer1Input {\n  create: [GameCreateWithoutPlayer1Input!]\n  connect: [GameWhereUniqueInput!]\n}\n\ninput GameCreateManyWithoutPlayer2Input {\n  create: [GameCreateWithoutPlayer2Input!]\n  connect: [GameWhereUniqueInput!]\n}\n\ninput GameCreateOneWithoutGameRoundsInput {\n  create: GameCreateWithoutGameRoundsInput\n  connect: GameWhereUniqueInput\n}\n\ninput GameCreateWithoutGameRoundsInput {\n  id: ID\n  player1: UserCreateOneWithoutGamesAsPlayer1Input!\n  player2: UserCreateOneWithoutGamesAsPlayer2Input!\n  whosTurn: WhosTurn!\n}\n\ninput GameCreateWithoutPlayer1Input {\n  id: ID\n  player2: UserCreateOneWithoutGamesAsPlayer2Input!\n  gameRounds: GameRoundCreateManyWithoutGameInput\n  whosTurn: WhosTurn!\n}\n\ninput GameCreateWithoutPlayer2Input {\n  id: ID\n  player1: UserCreateOneWithoutGamesAsPlayer1Input!\n  gameRounds: GameRoundCreateManyWithoutGameInput\n  whosTurn: WhosTurn!\n}\n\ntype GameEdge {\n  node: Game!\n  cursor: String!\n}\n\nenum GameOrderByInput {\n  id_ASC\n  id_DESC\n  whosTurn_ASC\n  whosTurn_DESC\n  createdAt_ASC\n  createdAt_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n}\n\ntype GamePreviousValues {\n  id: ID!\n  whosTurn: WhosTurn!\n}\n\ntype GameRound {\n  id: ID!\n  status: GameRoundStatus!\n  songQuestions(where: SongQuestionWhereInput, orderBy: SongQuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SongQuestion!]\n  Game: Game!\n}\n\ntype GameRoundConnection {\n  pageInfo: PageInfo!\n  edges: [GameRoundEdge]!\n  aggregate: AggregateGameRound!\n}\n\ninput GameRoundCreateInput {\n  id: ID\n  status: GameRoundStatus!\n  songQuestions: SongQuestionCreateManyWithoutGameRoundInput\n  Game: GameCreateOneWithoutGameRoundsInput!\n}\n\ninput GameRoundCreateManyWithoutGameInput {\n  create: [GameRoundCreateWithoutGameInput!]\n  connect: [GameRoundWhereUniqueInput!]\n}\n\ninput GameRoundCreateOneWithoutSongQuestionsInput {\n  create: GameRoundCreateWithoutSongQuestionsInput\n  connect: GameRoundWhereUniqueInput\n}\n\ninput GameRoundCreateWithoutGameInput {\n  id: ID\n  status: GameRoundStatus!\n  songQuestions: SongQuestionCreateManyWithoutGameRoundInput\n}\n\ninput GameRoundCreateWithoutSongQuestionsInput {\n  id: ID\n  status: GameRoundStatus!\n  Game: GameCreateOneWithoutGameRoundsInput!\n}\n\ntype GameRoundEdge {\n  node: GameRound!\n  cursor: String!\n}\n\nenum GameRoundOrderByInput {\n  id_ASC\n  id_DESC\n  status_ASC\n  status_DESC\n  createdAt_ASC\n  createdAt_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n}\n\ntype GameRoundPreviousValues {\n  id: ID!\n  status: GameRoundStatus!\n}\n\ninput GameRoundScalarWhereInput {\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  status: GameRoundStatus\n  status_not: GameRoundStatus\n  status_in: [GameRoundStatus!]\n  status_not_in: [GameRoundStatus!]\n  AND: [GameRoundScalarWhereInput!]\n  OR: [GameRoundScalarWhereInput!]\n  NOT: [GameRoundScalarWhereInput!]\n}\n\nenum GameRoundStatus {\n  ACTIVE\n  COMPLETED\n  CANCELED\n}\n\ntype GameRoundSubscriptionPayload {\n  mutation: MutationType!\n  node: GameRound\n  updatedFields: [String!]\n  previousValues: GameRoundPreviousValues\n}\n\ninput GameRoundSubscriptionWhereInput {\n  mutation_in: [MutationType!]\n  updatedFields_contains: String\n  updatedFields_contains_every: [String!]\n  updatedFields_contains_some: [String!]\n  node: GameRoundWhereInput\n  AND: [GameRoundSubscriptionWhereInput!]\n  OR: [GameRoundSubscriptionWhereInput!]\n  NOT: [GameRoundSubscriptionWhereInput!]\n}\n\ninput GameRoundUpdateInput {\n  status: GameRoundStatus\n  songQuestions: SongQuestionUpdateManyWithoutGameRoundInput\n  Game: GameUpdateOneRequiredWithoutGameRoundsInput\n}\n\ninput GameRoundUpdateManyDataInput {\n  status: GameRoundStatus\n}\n\ninput GameRoundUpdateManyMutationInput {\n  status: GameRoundStatus\n}\n\ninput GameRoundUpdateManyWithoutGameInput {\n  create: [GameRoundCreateWithoutGameInput!]\n  delete: [GameRoundWhereUniqueInput!]\n  connect: [GameRoundWhereUniqueInput!]\n  set: [GameRoundWhereUniqueInput!]\n  disconnect: [GameRoundWhereUniqueInput!]\n  update: [GameRoundUpdateWithWhereUniqueWithoutGameInput!]\n  upsert: [GameRoundUpsertWithWhereUniqueWithoutGameInput!]\n  deleteMany: [GameRoundScalarWhereInput!]\n  updateMany: [GameRoundUpdateManyWithWhereNestedInput!]\n}\n\ninput GameRoundUpdateManyWithWhereNestedInput {\n  where: GameRoundScalarWhereInput!\n  data: GameRoundUpdateManyDataInput!\n}\n\ninput GameRoundUpdateOneRequiredWithoutSongQuestionsInput {\n  create: GameRoundCreateWithoutSongQuestionsInput\n  update: GameRoundUpdateWithoutSongQuestionsDataInput\n  upsert: GameRoundUpsertWithoutSongQuestionsInput\n  connect: GameRoundWhereUniqueInput\n}\n\ninput GameRoundUpdateWithoutGameDataInput {\n  status: GameRoundStatus\n  songQuestions: SongQuestionUpdateManyWithoutGameRoundInput\n}\n\ninput GameRoundUpdateWithoutSongQuestionsDataInput {\n  status: GameRoundStatus\n  Game: GameUpdateOneRequiredWithoutGameRoundsInput\n}\n\ninput GameRoundUpdateWithWhereUniqueWithoutGameInput {\n  where: GameRoundWhereUniqueInput!\n  data: GameRoundUpdateWithoutGameDataInput!\n}\n\ninput GameRoundUpsertWithoutSongQuestionsInput {\n  update: GameRoundUpdateWithoutSongQuestionsDataInput!\n  create: GameRoundCreateWithoutSongQuestionsInput!\n}\n\ninput GameRoundUpsertWithWhereUniqueWithoutGameInput {\n  where: GameRoundWhereUniqueInput!\n  update: GameRoundUpdateWithoutGameDataInput!\n  create: GameRoundCreateWithoutGameInput!\n}\n\ninput GameRoundWhereInput {\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  status: GameRoundStatus\n  status_not: GameRoundStatus\n  status_in: [GameRoundStatus!]\n  status_not_in: [GameRoundStatus!]\n  songQuestions_every: SongQuestionWhereInput\n  songQuestions_some: SongQuestionWhereInput\n  songQuestions_none: SongQuestionWhereInput\n  Game: GameWhereInput\n  AND: [GameRoundWhereInput!]\n  OR: [GameRoundWhereInput!]\n  NOT: [GameRoundWhereInput!]\n}\n\ninput GameRoundWhereUniqueInput {\n  id: ID\n}\n\ninput GameScalarWhereInput {\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  whosTurn: WhosTurn\n  whosTurn_not: WhosTurn\n  whosTurn_in: [WhosTurn!]\n  whosTurn_not_in: [WhosTurn!]\n  AND: [GameScalarWhereInput!]\n  OR: [GameScalarWhereInput!]\n  NOT: [GameScalarWhereInput!]\n}\n\ntype GameSubscriptionPayload {\n  mutation: MutationType!\n  node: Game\n  updatedFields: [String!]\n  previousValues: GamePreviousValues\n}\n\ninput GameSubscriptionWhereInput {\n  mutation_in: [MutationType!]\n  updatedFields_contains: String\n  updatedFields_contains_every: [String!]\n  updatedFields_contains_some: [String!]\n  node: GameWhereInput\n  AND: [GameSubscriptionWhereInput!]\n  OR: [GameSubscriptionWhereInput!]\n  NOT: [GameSubscriptionWhereInput!]\n}\n\ninput GameUpdateInput {\n  player1: UserUpdateOneRequiredWithoutGamesAsPlayer1Input\n  player2: UserUpdateOneRequiredWithoutGamesAsPlayer2Input\n  gameRounds: GameRoundUpdateManyWithoutGameInput\n  whosTurn: WhosTurn\n}\n\ninput GameUpdateManyDataInput {\n  whosTurn: WhosTurn\n}\n\ninput GameUpdateManyMutationInput {\n  whosTurn: WhosTurn\n}\n\ninput GameUpdateManyWithoutPlayer1Input {\n  create: [GameCreateWithoutPlayer1Input!]\n  delete: [GameWhereUniqueInput!]\n  connect: [GameWhereUniqueInput!]\n  set: [GameWhereUniqueInput!]\n  disconnect: [GameWhereUniqueInput!]\n  update: [GameUpdateWithWhereUniqueWithoutPlayer1Input!]\n  upsert: [GameUpsertWithWhereUniqueWithoutPlayer1Input!]\n  deleteMany: [GameScalarWhereInput!]\n  updateMany: [GameUpdateManyWithWhereNestedInput!]\n}\n\ninput GameUpdateManyWithoutPlayer2Input {\n  create: [GameCreateWithoutPlayer2Input!]\n  delete: [GameWhereUniqueInput!]\n  connect: [GameWhereUniqueInput!]\n  set: [GameWhereUniqueInput!]\n  disconnect: [GameWhereUniqueInput!]\n  update: [GameUpdateWithWhereUniqueWithoutPlayer2Input!]\n  upsert: [GameUpsertWithWhereUniqueWithoutPlayer2Input!]\n  deleteMany: [GameScalarWhereInput!]\n  updateMany: [GameUpdateManyWithWhereNestedInput!]\n}\n\ninput GameUpdateManyWithWhereNestedInput {\n  where: GameScalarWhereInput!\n  data: GameUpdateManyDataInput!\n}\n\ninput GameUpdateOneRequiredWithoutGameRoundsInput {\n  create: GameCreateWithoutGameRoundsInput\n  update: GameUpdateWithoutGameRoundsDataInput\n  upsert: GameUpsertWithoutGameRoundsInput\n  connect: GameWhereUniqueInput\n}\n\ninput GameUpdateWithoutGameRoundsDataInput {\n  player1: UserUpdateOneRequiredWithoutGamesAsPlayer1Input\n  player2: UserUpdateOneRequiredWithoutGamesAsPlayer2Input\n  whosTurn: WhosTurn\n}\n\ninput GameUpdateWithoutPlayer1DataInput {\n  player2: UserUpdateOneRequiredWithoutGamesAsPlayer2Input\n  gameRounds: GameRoundUpdateManyWithoutGameInput\n  whosTurn: WhosTurn\n}\n\ninput GameUpdateWithoutPlayer2DataInput {\n  player1: UserUpdateOneRequiredWithoutGamesAsPlayer1Input\n  gameRounds: GameRoundUpdateManyWithoutGameInput\n  whosTurn: WhosTurn\n}\n\ninput GameUpdateWithWhereUniqueWithoutPlayer1Input {\n  where: GameWhereUniqueInput!\n  data: GameUpdateWithoutPlayer1DataInput!\n}\n\ninput GameUpdateWithWhereUniqueWithoutPlayer2Input {\n  where: GameWhereUniqueInput!\n  data: GameUpdateWithoutPlayer2DataInput!\n}\n\ninput GameUpsertWithoutGameRoundsInput {\n  update: GameUpdateWithoutGameRoundsDataInput!\n  create: GameCreateWithoutGameRoundsInput!\n}\n\ninput GameUpsertWithWhereUniqueWithoutPlayer1Input {\n  where: GameWhereUniqueInput!\n  update: GameUpdateWithoutPlayer1DataInput!\n  create: GameCreateWithoutPlayer1Input!\n}\n\ninput GameUpsertWithWhereUniqueWithoutPlayer2Input {\n  where: GameWhereUniqueInput!\n  update: GameUpdateWithoutPlayer2DataInput!\n  create: GameCreateWithoutPlayer2Input!\n}\n\ninput GameWhereInput {\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  player1: UserWhereInput\n  player2: UserWhereInput\n  gameRounds_every: GameRoundWhereInput\n  gameRounds_some: GameRoundWhereInput\n  gameRounds_none: GameRoundWhereInput\n  whosTurn: WhosTurn\n  whosTurn_not: WhosTurn\n  whosTurn_in: [WhosTurn!]\n  whosTurn_not_in: [WhosTurn!]\n  AND: [GameWhereInput!]\n  OR: [GameWhereInput!]\n  NOT: [GameWhereInput!]\n}\n\ninput GameWhereUniqueInput {\n  id: ID\n}\n\nscalar Long\n\ntype Mutation {\n  createArtist(data: ArtistCreateInput!): Artist!\n  updateArtist(data: ArtistUpdateInput!, where: ArtistWhereUniqueInput!): Artist\n  updateManyArtists(data: ArtistUpdateManyMutationInput!, where: ArtistWhereInput): BatchPayload!\n  upsertArtist(where: ArtistWhereUniqueInput!, create: ArtistCreateInput!, update: ArtistUpdateInput!): Artist!\n  deleteArtist(where: ArtistWhereUniqueInput!): Artist\n  deleteManyArtists(where: ArtistWhereInput): BatchPayload!\n  createGame(data: GameCreateInput!): Game!\n  updateGame(data: GameUpdateInput!, where: GameWhereUniqueInput!): Game\n  updateManyGames(data: GameUpdateManyMutationInput!, where: GameWhereInput): BatchPayload!\n  upsertGame(where: GameWhereUniqueInput!, create: GameCreateInput!, update: GameUpdateInput!): Game!\n  deleteGame(where: GameWhereUniqueInput!): Game\n  deleteManyGames(where: GameWhereInput): BatchPayload!\n  createGameRound(data: GameRoundCreateInput!): GameRound!\n  updateGameRound(data: GameRoundUpdateInput!, where: GameRoundWhereUniqueInput!): GameRound\n  updateManyGameRounds(data: GameRoundUpdateManyMutationInput!, where: GameRoundWhereInput): BatchPayload!\n  upsertGameRound(where: GameRoundWhereUniqueInput!, create: GameRoundCreateInput!, update: GameRoundUpdateInput!): GameRound!\n  deleteGameRound(where: GameRoundWhereUniqueInput!): GameRound\n  deleteManyGameRounds(where: GameRoundWhereInput): BatchPayload!\n  createSong(data: SongCreateInput!): Song!\n  updateSong(data: SongUpdateInput!, where: SongWhereUniqueInput!): Song\n  updateManySongs(data: SongUpdateManyMutationInput!, where: SongWhereInput): BatchPayload!\n  upsertSong(where: SongWhereUniqueInput!, create: SongCreateInput!, update: SongUpdateInput!): Song!\n  deleteSong(where: SongWhereUniqueInput!): Song\n  deleteManySongs(where: SongWhereInput): BatchPayload!\n  createSongAnswer(data: SongAnswerCreateInput!): SongAnswer!\n  updateSongAnswer(data: SongAnswerUpdateInput!, where: SongAnswerWhereUniqueInput!): SongAnswer\n  updateManySongAnswers(data: SongAnswerUpdateManyMutationInput!, where: SongAnswerWhereInput): BatchPayload!\n  upsertSongAnswer(where: SongAnswerWhereUniqueInput!, create: SongAnswerCreateInput!, update: SongAnswerUpdateInput!): SongAnswer!\n  deleteSongAnswer(where: SongAnswerWhereUniqueInput!): SongAnswer\n  deleteManySongAnswers(where: SongAnswerWhereInput): BatchPayload!\n  createSongQuestion(data: SongQuestionCreateInput!): SongQuestion!\n  updateSongQuestion(data: SongQuestionUpdateInput!, where: SongQuestionWhereUniqueInput!): SongQuestion\n  upsertSongQuestion(where: SongQuestionWhereUniqueInput!, create: SongQuestionCreateInput!, update: SongQuestionUpdateInput!): SongQuestion!\n  deleteSongQuestion(where: SongQuestionWhereUniqueInput!): SongQuestion\n  deleteManySongQuestions(where: SongQuestionWhereInput): BatchPayload!\n  createUser(data: UserCreateInput!): User!\n  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!\n  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!\n  deleteUser(where: UserWhereUniqueInput!): User\n  deleteManyUsers(where: UserWhereInput): BatchPayload!\n}\n\nenum MutationType {\n  CREATED\n  UPDATED\n  DELETED\n}\n\ninterface Node {\n  id: ID!\n}\n\ntype PageInfo {\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String\n  endCursor: String\n}\n\ntype Query {\n  artist(where: ArtistWhereUniqueInput!): Artist\n  artists(where: ArtistWhereInput, orderBy: ArtistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Artist]!\n  artistsConnection(where: ArtistWhereInput, orderBy: ArtistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ArtistConnection!\n  game(where: GameWhereUniqueInput!): Game\n  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game]!\n  gamesConnection(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GameConnection!\n  gameRound(where: GameRoundWhereUniqueInput!): GameRound\n  gameRounds(where: GameRoundWhereInput, orderBy: GameRoundOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GameRound]!\n  gameRoundsConnection(where: GameRoundWhereInput, orderBy: GameRoundOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GameRoundConnection!\n  song(where: SongWhereUniqueInput!): Song\n  songs(where: SongWhereInput, orderBy: SongOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Song]!\n  songsConnection(where: SongWhereInput, orderBy: SongOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SongConnection!\n  songAnswer(where: SongAnswerWhereUniqueInput!): SongAnswer\n  songAnswers(where: SongAnswerWhereInput, orderBy: SongAnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SongAnswer]!\n  songAnswersConnection(where: SongAnswerWhereInput, orderBy: SongAnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SongAnswerConnection!\n  songQuestion(where: SongQuestionWhereUniqueInput!): SongQuestion\n  songQuestions(where: SongQuestionWhereInput, orderBy: SongQuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SongQuestion]!\n  songQuestionsConnection(where: SongQuestionWhereInput, orderBy: SongQuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SongQuestionConnection!\n  user(where: UserWhereUniqueInput!): User\n  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!\n  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!\n  node(id: ID!): Node\n}\n\ntype Song {\n  id: ID!\n  name: String!\n  artist: Artist!\n}\n\ntype SongAnswer {\n  id: ID!\n  startTime: DateTime!\n  user: User!\n  guessedSong: Song\n  time: Int\n  question: SongQuestion!\n}\n\ntype SongAnswerConnection {\n  pageInfo: PageInfo!\n  edges: [SongAnswerEdge]!\n  aggregate: AggregateSongAnswer!\n}\n\ninput SongAnswerCreateInput {\n  id: ID\n  startTime: DateTime!\n  user: UserCreateOneInput!\n  guessedSong: SongCreateOneInput\n  time: Int\n  question: SongQuestionCreateOneWithoutAnswersInput!\n}\n\ninput SongAnswerCreateManyWithoutQuestionInput {\n  create: [SongAnswerCreateWithoutQuestionInput!]\n  connect: [SongAnswerWhereUniqueInput!]\n}\n\ninput SongAnswerCreateWithoutQuestionInput {\n  id: ID\n  startTime: DateTime!\n  user: UserCreateOneInput!\n  guessedSong: SongCreateOneInput\n  time: Int\n}\n\ntype SongAnswerEdge {\n  node: SongAnswer!\n  cursor: String!\n}\n\nenum SongAnswerOrderByInput {\n  id_ASC\n  id_DESC\n  startTime_ASC\n  startTime_DESC\n  time_ASC\n  time_DESC\n  createdAt_ASC\n  createdAt_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n}\n\ntype SongAnswerPreviousValues {\n  id: ID!\n  startTime: DateTime!\n  time: Int\n}\n\ninput SongAnswerScalarWhereInput {\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  startTime: DateTime\n  startTime_not: DateTime\n  startTime_in: [DateTime!]\n  startTime_not_in: [DateTime!]\n  startTime_lt: DateTime\n  startTime_lte: DateTime\n  startTime_gt: DateTime\n  startTime_gte: DateTime\n  time: Int\n  time_not: Int\n  time_in: [Int!]\n  time_not_in: [Int!]\n  time_lt: Int\n  time_lte: Int\n  time_gt: Int\n  time_gte: Int\n  AND: [SongAnswerScalarWhereInput!]\n  OR: [SongAnswerScalarWhereInput!]\n  NOT: [SongAnswerScalarWhereInput!]\n}\n\ntype SongAnswerSubscriptionPayload {\n  mutation: MutationType!\n  node: SongAnswer\n  updatedFields: [String!]\n  previousValues: SongAnswerPreviousValues\n}\n\ninput SongAnswerSubscriptionWhereInput {\n  mutation_in: [MutationType!]\n  updatedFields_contains: String\n  updatedFields_contains_every: [String!]\n  updatedFields_contains_some: [String!]\n  node: SongAnswerWhereInput\n  AND: [SongAnswerSubscriptionWhereInput!]\n  OR: [SongAnswerSubscriptionWhereInput!]\n  NOT: [SongAnswerSubscriptionWhereInput!]\n}\n\ninput SongAnswerUpdateInput {\n  startTime: DateTime\n  user: UserUpdateOneRequiredInput\n  guessedSong: SongUpdateOneInput\n  time: Int\n  question: SongQuestionUpdateOneRequiredWithoutAnswersInput\n}\n\ninput SongAnswerUpdateManyDataInput {\n  startTime: DateTime\n  time: Int\n}\n\ninput SongAnswerUpdateManyMutationInput {\n  startTime: DateTime\n  time: Int\n}\n\ninput SongAnswerUpdateManyWithoutQuestionInput {\n  create: [SongAnswerCreateWithoutQuestionInput!]\n  delete: [SongAnswerWhereUniqueInput!]\n  connect: [SongAnswerWhereUniqueInput!]\n  set: [SongAnswerWhereUniqueInput!]\n  disconnect: [SongAnswerWhereUniqueInput!]\n  update: [SongAnswerUpdateWithWhereUniqueWithoutQuestionInput!]\n  upsert: [SongAnswerUpsertWithWhereUniqueWithoutQuestionInput!]\n  deleteMany: [SongAnswerScalarWhereInput!]\n  updateMany: [SongAnswerUpdateManyWithWhereNestedInput!]\n}\n\ninput SongAnswerUpdateManyWithWhereNestedInput {\n  where: SongAnswerScalarWhereInput!\n  data: SongAnswerUpdateManyDataInput!\n}\n\ninput SongAnswerUpdateWithoutQuestionDataInput {\n  startTime: DateTime\n  user: UserUpdateOneRequiredInput\n  guessedSong: SongUpdateOneInput\n  time: Int\n}\n\ninput SongAnswerUpdateWithWhereUniqueWithoutQuestionInput {\n  where: SongAnswerWhereUniqueInput!\n  data: SongAnswerUpdateWithoutQuestionDataInput!\n}\n\ninput SongAnswerUpsertWithWhereUniqueWithoutQuestionInput {\n  where: SongAnswerWhereUniqueInput!\n  update: SongAnswerUpdateWithoutQuestionDataInput!\n  create: SongAnswerCreateWithoutQuestionInput!\n}\n\ninput SongAnswerWhereInput {\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  startTime: DateTime\n  startTime_not: DateTime\n  startTime_in: [DateTime!]\n  startTime_not_in: [DateTime!]\n  startTime_lt: DateTime\n  startTime_lte: DateTime\n  startTime_gt: DateTime\n  startTime_gte: DateTime\n  user: UserWhereInput\n  guessedSong: SongWhereInput\n  time: Int\n  time_not: Int\n  time_in: [Int!]\n  time_not_in: [Int!]\n  time_lt: Int\n  time_lte: Int\n  time_gt: Int\n  time_gte: Int\n  question: SongQuestionWhereInput\n  AND: [SongAnswerWhereInput!]\n  OR: [SongAnswerWhereInput!]\n  NOT: [SongAnswerWhereInput!]\n}\n\ninput SongAnswerWhereUniqueInput {\n  id: ID\n}\n\ntype SongConnection {\n  pageInfo: PageInfo!\n  edges: [SongEdge]!\n  aggregate: AggregateSong!\n}\n\ninput SongCreateInput {\n  id: ID\n  name: String!\n  artist: ArtistCreateOneWithoutSongsInput!\n}\n\ninput SongCreateManyWithoutArtistInput {\n  create: [SongCreateWithoutArtistInput!]\n  connect: [SongWhereUniqueInput!]\n}\n\ninput SongCreateOneInput {\n  create: SongCreateInput\n  connect: SongWhereUniqueInput\n}\n\ninput SongCreateWithoutArtistInput {\n  id: ID\n  name: String!\n}\n\ntype SongEdge {\n  node: Song!\n  cursor: String!\n}\n\nenum SongOrderByInput {\n  id_ASC\n  id_DESC\n  name_ASC\n  name_DESC\n  createdAt_ASC\n  createdAt_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n}\n\ntype SongPreviousValues {\n  id: ID!\n  name: String!\n}\n\ntype SongQuestion {\n  id: ID!\n  song: Song!\n  answers(where: SongAnswerWhereInput, orderBy: SongAnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SongAnswer!]\n  gameRound: GameRound!\n}\n\ntype SongQuestionConnection {\n  pageInfo: PageInfo!\n  edges: [SongQuestionEdge]!\n  aggregate: AggregateSongQuestion!\n}\n\ninput SongQuestionCreateInput {\n  id: ID\n  song: SongCreateOneInput!\n  answers: SongAnswerCreateManyWithoutQuestionInput\n  gameRound: GameRoundCreateOneWithoutSongQuestionsInput!\n}\n\ninput SongQuestionCreateManyWithoutGameRoundInput {\n  create: [SongQuestionCreateWithoutGameRoundInput!]\n  connect: [SongQuestionWhereUniqueInput!]\n}\n\ninput SongQuestionCreateOneWithoutAnswersInput {\n  create: SongQuestionCreateWithoutAnswersInput\n  connect: SongQuestionWhereUniqueInput\n}\n\ninput SongQuestionCreateWithoutAnswersInput {\n  id: ID\n  song: SongCreateOneInput!\n  gameRound: GameRoundCreateOneWithoutSongQuestionsInput!\n}\n\ninput SongQuestionCreateWithoutGameRoundInput {\n  id: ID\n  song: SongCreateOneInput!\n  answers: SongAnswerCreateManyWithoutQuestionInput\n}\n\ntype SongQuestionEdge {\n  node: SongQuestion!\n  cursor: String!\n}\n\nenum SongQuestionOrderByInput {\n  id_ASC\n  id_DESC\n  createdAt_ASC\n  createdAt_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n}\n\ntype SongQuestionPreviousValues {\n  id: ID!\n}\n\ninput SongQuestionScalarWhereInput {\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  AND: [SongQuestionScalarWhereInput!]\n  OR: [SongQuestionScalarWhereInput!]\n  NOT: [SongQuestionScalarWhereInput!]\n}\n\ntype SongQuestionSubscriptionPayload {\n  mutation: MutationType!\n  node: SongQuestion\n  updatedFields: [String!]\n  previousValues: SongQuestionPreviousValues\n}\n\ninput SongQuestionSubscriptionWhereInput {\n  mutation_in: [MutationType!]\n  updatedFields_contains: String\n  updatedFields_contains_every: [String!]\n  updatedFields_contains_some: [String!]\n  node: SongQuestionWhereInput\n  AND: [SongQuestionSubscriptionWhereInput!]\n  OR: [SongQuestionSubscriptionWhereInput!]\n  NOT: [SongQuestionSubscriptionWhereInput!]\n}\n\ninput SongQuestionUpdateInput {\n  song: SongUpdateOneRequiredInput\n  answers: SongAnswerUpdateManyWithoutQuestionInput\n  gameRound: GameRoundUpdateOneRequiredWithoutSongQuestionsInput\n}\n\ninput SongQuestionUpdateManyWithoutGameRoundInput {\n  create: [SongQuestionCreateWithoutGameRoundInput!]\n  delete: [SongQuestionWhereUniqueInput!]\n  connect: [SongQuestionWhereUniqueInput!]\n  set: [SongQuestionWhereUniqueInput!]\n  disconnect: [SongQuestionWhereUniqueInput!]\n  update: [SongQuestionUpdateWithWhereUniqueWithoutGameRoundInput!]\n  upsert: [SongQuestionUpsertWithWhereUniqueWithoutGameRoundInput!]\n  deleteMany: [SongQuestionScalarWhereInput!]\n}\n\ninput SongQuestionUpdateOneRequiredWithoutAnswersInput {\n  create: SongQuestionCreateWithoutAnswersInput\n  update: SongQuestionUpdateWithoutAnswersDataInput\n  upsert: SongQuestionUpsertWithoutAnswersInput\n  connect: SongQuestionWhereUniqueInput\n}\n\ninput SongQuestionUpdateWithoutAnswersDataInput {\n  song: SongUpdateOneRequiredInput\n  gameRound: GameRoundUpdateOneRequiredWithoutSongQuestionsInput\n}\n\ninput SongQuestionUpdateWithoutGameRoundDataInput {\n  song: SongUpdateOneRequiredInput\n  answers: SongAnswerUpdateManyWithoutQuestionInput\n}\n\ninput SongQuestionUpdateWithWhereUniqueWithoutGameRoundInput {\n  where: SongQuestionWhereUniqueInput!\n  data: SongQuestionUpdateWithoutGameRoundDataInput!\n}\n\ninput SongQuestionUpsertWithoutAnswersInput {\n  update: SongQuestionUpdateWithoutAnswersDataInput!\n  create: SongQuestionCreateWithoutAnswersInput!\n}\n\ninput SongQuestionUpsertWithWhereUniqueWithoutGameRoundInput {\n  where: SongQuestionWhereUniqueInput!\n  update: SongQuestionUpdateWithoutGameRoundDataInput!\n  create: SongQuestionCreateWithoutGameRoundInput!\n}\n\ninput SongQuestionWhereInput {\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  song: SongWhereInput\n  answers_every: SongAnswerWhereInput\n  answers_some: SongAnswerWhereInput\n  answers_none: SongAnswerWhereInput\n  gameRound: GameRoundWhereInput\n  AND: [SongQuestionWhereInput!]\n  OR: [SongQuestionWhereInput!]\n  NOT: [SongQuestionWhereInput!]\n}\n\ninput SongQuestionWhereUniqueInput {\n  id: ID\n}\n\ninput SongScalarWhereInput {\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  name: String\n  name_not: String\n  name_in: [String!]\n  name_not_in: [String!]\n  name_lt: String\n  name_lte: String\n  name_gt: String\n  name_gte: String\n  name_contains: String\n  name_not_contains: String\n  name_starts_with: String\n  name_not_starts_with: String\n  name_ends_with: String\n  name_not_ends_with: String\n  AND: [SongScalarWhereInput!]\n  OR: [SongScalarWhereInput!]\n  NOT: [SongScalarWhereInput!]\n}\n\ntype SongSubscriptionPayload {\n  mutation: MutationType!\n  node: Song\n  updatedFields: [String!]\n  previousValues: SongPreviousValues\n}\n\ninput SongSubscriptionWhereInput {\n  mutation_in: [MutationType!]\n  updatedFields_contains: String\n  updatedFields_contains_every: [String!]\n  updatedFields_contains_some: [String!]\n  node: SongWhereInput\n  AND: [SongSubscriptionWhereInput!]\n  OR: [SongSubscriptionWhereInput!]\n  NOT: [SongSubscriptionWhereInput!]\n}\n\ninput SongUpdateDataInput {\n  name: String\n  artist: ArtistUpdateOneRequiredWithoutSongsInput\n}\n\ninput SongUpdateInput {\n  name: String\n  artist: ArtistUpdateOneRequiredWithoutSongsInput\n}\n\ninput SongUpdateManyDataInput {\n  name: String\n}\n\ninput SongUpdateManyMutationInput {\n  name: String\n}\n\ninput SongUpdateManyWithoutArtistInput {\n  create: [SongCreateWithoutArtistInput!]\n  delete: [SongWhereUniqueInput!]\n  connect: [SongWhereUniqueInput!]\n  set: [SongWhereUniqueInput!]\n  disconnect: [SongWhereUniqueInput!]\n  update: [SongUpdateWithWhereUniqueWithoutArtistInput!]\n  upsert: [SongUpsertWithWhereUniqueWithoutArtistInput!]\n  deleteMany: [SongScalarWhereInput!]\n  updateMany: [SongUpdateManyWithWhereNestedInput!]\n}\n\ninput SongUpdateManyWithWhereNestedInput {\n  where: SongScalarWhereInput!\n  data: SongUpdateManyDataInput!\n}\n\ninput SongUpdateOneInput {\n  create: SongCreateInput\n  update: SongUpdateDataInput\n  upsert: SongUpsertNestedInput\n  delete: Boolean\n  disconnect: Boolean\n  connect: SongWhereUniqueInput\n}\n\ninput SongUpdateOneRequiredInput {\n  create: SongCreateInput\n  update: SongUpdateDataInput\n  upsert: SongUpsertNestedInput\n  connect: SongWhereUniqueInput\n}\n\ninput SongUpdateWithoutArtistDataInput {\n  name: String\n}\n\ninput SongUpdateWithWhereUniqueWithoutArtistInput {\n  where: SongWhereUniqueInput!\n  data: SongUpdateWithoutArtistDataInput!\n}\n\ninput SongUpsertNestedInput {\n  update: SongUpdateDataInput!\n  create: SongCreateInput!\n}\n\ninput SongUpsertWithWhereUniqueWithoutArtistInput {\n  where: SongWhereUniqueInput!\n  update: SongUpdateWithoutArtistDataInput!\n  create: SongCreateWithoutArtistInput!\n}\n\ninput SongWhereInput {\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  name: String\n  name_not: String\n  name_in: [String!]\n  name_not_in: [String!]\n  name_lt: String\n  name_lte: String\n  name_gt: String\n  name_gte: String\n  name_contains: String\n  name_not_contains: String\n  name_starts_with: String\n  name_not_starts_with: String\n  name_ends_with: String\n  name_not_ends_with: String\n  artist: ArtistWhereInput\n  AND: [SongWhereInput!]\n  OR: [SongWhereInput!]\n  NOT: [SongWhereInput!]\n}\n\ninput SongWhereUniqueInput {\n  id: ID\n  name: String\n}\n\ntype Subscription {\n  artist(where: ArtistSubscriptionWhereInput): ArtistSubscriptionPayload\n  game(where: GameSubscriptionWhereInput): GameSubscriptionPayload\n  gameRound(where: GameRoundSubscriptionWhereInput): GameRoundSubscriptionPayload\n  song(where: SongSubscriptionWhereInput): SongSubscriptionPayload\n  songAnswer(where: SongAnswerSubscriptionWhereInput): SongAnswerSubscriptionPayload\n  songQuestion(where: SongQuestionSubscriptionWhereInput): SongQuestionSubscriptionPayload\n  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload\n}\n\ntype User {\n  id: ID!\n  name: String!\n  gamesAsPlayer1(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game!]\n  gamesAsPlayer2(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game!]\n}\n\ntype UserConnection {\n  pageInfo: PageInfo!\n  edges: [UserEdge]!\n  aggregate: AggregateUser!\n}\n\ninput UserCreateInput {\n  id: ID\n  name: String!\n  gamesAsPlayer1: GameCreateManyWithoutPlayer1Input\n  gamesAsPlayer2: GameCreateManyWithoutPlayer2Input\n}\n\ninput UserCreateOneInput {\n  create: UserCreateInput\n  connect: UserWhereUniqueInput\n}\n\ninput UserCreateOneWithoutGamesAsPlayer1Input {\n  create: UserCreateWithoutGamesAsPlayer1Input\n  connect: UserWhereUniqueInput\n}\n\ninput UserCreateOneWithoutGamesAsPlayer2Input {\n  create: UserCreateWithoutGamesAsPlayer2Input\n  connect: UserWhereUniqueInput\n}\n\ninput UserCreateWithoutGamesAsPlayer1Input {\n  id: ID\n  name: String!\n  gamesAsPlayer2: GameCreateManyWithoutPlayer2Input\n}\n\ninput UserCreateWithoutGamesAsPlayer2Input {\n  id: ID\n  name: String!\n  gamesAsPlayer1: GameCreateManyWithoutPlayer1Input\n}\n\ntype UserEdge {\n  node: User!\n  cursor: String!\n}\n\nenum UserOrderByInput {\n  id_ASC\n  id_DESC\n  name_ASC\n  name_DESC\n  createdAt_ASC\n  createdAt_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n}\n\ntype UserPreviousValues {\n  id: ID!\n  name: String!\n}\n\ntype UserSubscriptionPayload {\n  mutation: MutationType!\n  node: User\n  updatedFields: [String!]\n  previousValues: UserPreviousValues\n}\n\ninput UserSubscriptionWhereInput {\n  mutation_in: [MutationType!]\n  updatedFields_contains: String\n  updatedFields_contains_every: [String!]\n  updatedFields_contains_some: [String!]\n  node: UserWhereInput\n  AND: [UserSubscriptionWhereInput!]\n  OR: [UserSubscriptionWhereInput!]\n  NOT: [UserSubscriptionWhereInput!]\n}\n\ninput UserUpdateDataInput {\n  name: String\n  gamesAsPlayer1: GameUpdateManyWithoutPlayer1Input\n  gamesAsPlayer2: GameUpdateManyWithoutPlayer2Input\n}\n\ninput UserUpdateInput {\n  name: String\n  gamesAsPlayer1: GameUpdateManyWithoutPlayer1Input\n  gamesAsPlayer2: GameUpdateManyWithoutPlayer2Input\n}\n\ninput UserUpdateManyMutationInput {\n  name: String\n}\n\ninput UserUpdateOneRequiredInput {\n  create: UserCreateInput\n  update: UserUpdateDataInput\n  upsert: UserUpsertNestedInput\n  connect: UserWhereUniqueInput\n}\n\ninput UserUpdateOneRequiredWithoutGamesAsPlayer1Input {\n  create: UserCreateWithoutGamesAsPlayer1Input\n  update: UserUpdateWithoutGamesAsPlayer1DataInput\n  upsert: UserUpsertWithoutGamesAsPlayer1Input\n  connect: UserWhereUniqueInput\n}\n\ninput UserUpdateOneRequiredWithoutGamesAsPlayer2Input {\n  create: UserCreateWithoutGamesAsPlayer2Input\n  update: UserUpdateWithoutGamesAsPlayer2DataInput\n  upsert: UserUpsertWithoutGamesAsPlayer2Input\n  connect: UserWhereUniqueInput\n}\n\ninput UserUpdateWithoutGamesAsPlayer1DataInput {\n  name: String\n  gamesAsPlayer2: GameUpdateManyWithoutPlayer2Input\n}\n\ninput UserUpdateWithoutGamesAsPlayer2DataInput {\n  name: String\n  gamesAsPlayer1: GameUpdateManyWithoutPlayer1Input\n}\n\ninput UserUpsertNestedInput {\n  update: UserUpdateDataInput!\n  create: UserCreateInput!\n}\n\ninput UserUpsertWithoutGamesAsPlayer1Input {\n  update: UserUpdateWithoutGamesAsPlayer1DataInput!\n  create: UserCreateWithoutGamesAsPlayer1Input!\n}\n\ninput UserUpsertWithoutGamesAsPlayer2Input {\n  update: UserUpdateWithoutGamesAsPlayer2DataInput!\n  create: UserCreateWithoutGamesAsPlayer2Input!\n}\n\ninput UserWhereInput {\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  name: String\n  name_not: String\n  name_in: [String!]\n  name_not_in: [String!]\n  name_lt: String\n  name_lte: String\n  name_gt: String\n  name_gte: String\n  name_contains: String\n  name_not_contains: String\n  name_starts_with: String\n  name_not_starts_with: String\n  name_ends_with: String\n  name_not_ends_with: String\n  gamesAsPlayer1_every: GameWhereInput\n  gamesAsPlayer1_some: GameWhereInput\n  gamesAsPlayer1_none: GameWhereInput\n  gamesAsPlayer2_every: GameWhereInput\n  gamesAsPlayer2_some: GameWhereInput\n  gamesAsPlayer2_none: GameWhereInput\n  AND: [UserWhereInput!]\n  OR: [UserWhereInput!]\n  NOT: [UserWhereInput!]\n}\n\ninput UserWhereUniqueInput {\n  id: ID\n}\n\nenum WhosTurn {\n  PLAYER1\n  PLAYER2\n}\n";
//# sourceMappingURL=prisma-schema.js.map